version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      kafka_network:

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "9093:9093"
    command:
      - bash
      - -c
      - |
        /etc/confluent/docker/run &
        echo "Waiting for Kafka to be ready..." &&
        while ! kafka-topics --list --bootstrap-server kafka:9092; do sleep 5; done &&
        kafka-topics --create --topic chat_requests_generic --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --if-not-exists &&
        kafka-topics --create --topic chat_responses_generic --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --if-not-exists &&
        wait
    networks:
      kafka_network:
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --list --bootstrap-server kafka:9092 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8080:8080"
    networks:
      kafka_network:

  qwen-worker:
    build:
      context: .
      dockerfile: app/agent/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      OPENAI_TOKEN: "${FIRST_OPENAI_TOKEN}"
      OPENAI_MODEL_NAME: "${FIRST_OPENAI_MODEL_NAME}"
      OPENAI_HOST: "${FIRST_OPENAI_HOST}"
      KAFKA_REQUEST_TOPIC: "chat_requests_generic"
      KAFKA_RESPONSE_TOPIC: "chat_responses_generic"
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "qwen2_5"
    deploy:
      mode: replicated
      replicas: 1
    networks:
      kafka_network:

# Example for extending
#  chatgpt-worker:
#    build:
#      context: .
#      dockerfile: app/agent/Dockerfile
#    depends_on:
#      kafka:
#        condition: service_healthy
#    environment:
#      OPENAI_TOKEN: "${SECOND_OPENAI_TOKEN}"
#      OPENAI_MODEL_NAME: "${SECOND_OPENAI_MODEL_NAME}"
#      OPENAI_HOST: "${SECOND_OPENAI_HOST}"
#      KAFKA_REQUEST_TOPIC: "chat_requests_generic"
#      KAFKA_RESPONSE_TOPIC: "chat_responses_generic"
#      BOOTSTRAP_SERVERS: kafka:9092
#      GROUP_ID: "gpt-4"
#    networks:
#      kafka_network:
#    deploy:
#      mode: replicated
#      replicas: 1

  main:
    build:
      context: .
      dockerfile: app/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - qwen-worker
    environment:
      KAFKA_REQUEST_TOPIC: "chat_requests_generic"
      KAFKA_RESPONSE_TOPIC: "chat_responses_generic"
      BOOTSTRAP_SERVERS: kafka:9092
    networks:
      kafka_network:

networks:
  kafka_network:
    driver: bridge
